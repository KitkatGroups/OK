# Simple undirected graph using adjacency list
graph = {
    'A': ['B', 'C'],  # Node A is connected to B and C
    'B': ['A', 'D', 'E'],  # Node B is connected to A, D, and E
    'C': ['A', 'F'],  # Node C is connected to A and F
    'D': ['B'],  # Node D is connected to B
    'E': ['B', 'F'],  # Node E is connected to B and F
    'F': ['C', 'E']  # Node F is connected to C and E
}

# Depth First Search (recursive)
def dfs(graph, node, visited=None):
    # Initialize the visited set if it's not already provided
    if visited is None:
        visited = set()
    
    # Mark the current node as visited and print it
    visited.add(node)
    print(node, end=' ')
    
    # Recurse for all unvisited neighbors of the current node
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Breadth First Search (using queue)
def bfs(graph, start):
    # Set to track visited nodes
    visited = set()
    
    # Initialize the queue with the starting node
    queue = [start]
    
    # Process nodes in the queue
    while queue:
        # Dequeue the first node
        node = queue.pop(0)
        
        # If the node hasn't been visited, mark it as visited and print it
        if node not in visited:
            print(node, end=' ')
            visited.add(node)
            
            # Enqueue all unvisited neighbors of the current node
            queue.extend(neighbor for neighbor in graph[node] if neighbor not in visited)

# Run DFS
print("DFS Traversal:")
dfs(graph, 'A')  # Starting DFS traversal from node 'A'

# Print a newline for separation
print("\n\nBFS Traversal:")

# Run BFS
bfs(graph, 'A')  # Starting BFS traversal from node 'A'






















import heapq  # for priority queue (min-heap)

def astar_search(start, goal, graph, heuristic):
    open_list = []  # priority queue for nodes to explore
    heapq.heappush(open_list, (0 + heuristic[start], 0, start, [start]))  # (f, g, node, path)
    closed_set = set()  # to store visited nodes

    while open_list:
        f, g, current, path = heapq.heappop(open_list)

        if current == goal:
            return path  # Goal reached, return the path

        closed_set.add(current)

        for neighbor, cost in graph[current]:
            if neighbor not in closed_set:
                g_new = g + cost
                f_new = g_new + heuristic[neighbor]
                heapq.heappush(open_list, (f_new, g_new, neighbor, path + [neighbor]))

    return None  # No path found

# Example graph (adjacency list with cost)
graph = {
    'A': [('B', 1), ('C', 5)],
    'B': [('A', 1), ('D', 7)],
    'C': [('A', 5), ('D', 10)],
    'D': [('B', 7), ('C', 10)]
}

# Heuristic values (approximate cost to reach goal D)
heuristic = {
    'A': 6,
    'B': 4,
    'C': 2,
    'D': 0
}

# Running A* search from 'A' to 'D'
path = astar_search('A', 'D', graph, heuristic)
print("Path found:", path)


















import heapq  # To use a priority queue (min-heap) for A* open list

# A* algorithm function
def astar(start, goal, graph):
    # open_list stores tuples of (f = g + h, g, node)
    open_list = [(0 + heuristic(start, goal), 0, start)]
    heapq.heapify(open_list)  # Make it a proper heap
    visited = set()  # To track visited nodes

    while open_list:
        f, g, node = heapq.heappop(open_list)  # Get the node with the lowest f
        if node == goal:
            print("Reached goal:", node)
            return
        visited.add(node)  # Mark current node as visited

        for neighbor, cost in graph.get(node, []):  # Loop over neighbors
            if neighbor not in visited:
                new_g = g + cost  # g(n) = cost from start to neighbor
                f_value = new_g + heuristic(neighbor, goal)  # f(n) = g(n) + h(n)
                heapq.heappush(open_list, (f_value, new_g, neighbor))  # Add neighbor to open list

# Heuristic function: Manhattan distance between two points
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Graph represented with edge costs
graph = {
    (0,0): [((0,1), 2), ((1,0), 3)],  # Node (0,0) connected to (0,1) and (1,0) with costs
    (0,1): [((0,0), 2), ((1,1), 1)],
    (1,0): [((0,0), 3), ((1,1), 4)],
    (1,1): [((0,1), 1), ((1,0), 4), ((2,1), 5)],
    (2,1): [((1,1), 5)]
}

# Run the A* search
astar((0,0), (2,1), graph)








# A* Algorithm implementation

# A* search algorithm
def astar(start, goal, graph):
    # Open list will store nodes to be evaluated. Each element is a tuple (cost, node).
    # The first element is the cost to reach that node, starting with 0 for the start node.
    open_list = [(0, start)]
    
    # Set to keep track of visited nodes to avoid revisiting
    visited = set()

    while open_list:
        # Pop the node with the lowest cost from the open list
        cost, node = min(open_list)  # Get the node with the least cost (min heap can be used instead for optimization)
        open_list.remove((cost, node))  # Remove the node from open list
        
        # If we've reached the goal, print and return
        if node == goal:
            print("Reached:", node)
            return
        
        # Add the current node to the visited set
        visited.add(node)
        
        # Loop through each neighbor of the current node
        for neighbor in graph.get(node, []):
            # If neighbor hasn't been visited yet, calculate the new cost and append it to the open list
            if neighbor not in visited:
                # The cost is calculated as the current cost + 1 (for moving to the neighbor) 
                # plus the heuristic (estimated cost to the goal)
                open_list.append((cost + 1 + heuristic(neighbor, goal), neighbor))

# Heuristic function to estimate the cost from current node to the goal
# Here, we use Manhattan distance (sum of absolute differences of x and y coordinates)
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Graph definition: a dictionary where each key is a node (coordinate), and each value is a list of neighboring nodes
graph = {
    (0,0): [(0,1), (1,0)],  # Node (0,0) has neighbors (0,1) and (1,0)
    (0,1): [(0,0), (1,1)],  # Node (0,1) has neighbors (0,0) and (1,1)
    (1,0): [(0,0), (1,1)],  # Node (1,0) has neighbors (0,0) and (1,1)
    (1,1): [(0,1), (1,0), (2,1)],  # Node (1,1) has neighbors (0,1), (1,0), and (2,1)
    (2,1): [(1,1)]  # Node (2,1) has neighbor (1,1)
}

# Running the A* search algorithm to find the path from (0,0) to (2,1)
astar((0,0), (2,1), graph)











import heapq  # for priority queue (min-heap)

def prims(graph):
    visited = set()  # to keep track of visited nodes
    min_heap = [(0, 0)]  # heap storing (weight, node), starting with node 0 and weight 0
    total_cost = 0  # to store total weight of MST

    while min_heap:
        weight, u = heapq.heappop(min_heap)  # get the edge with the smallest weight
        if u not in visited:
            visited.add(u)  # mark node as visited
            total_cost += weight  # add edge weight to total MST cost

            # Push all adjacent (neighbor, weight) pairs into heap
            for v, w in graph[u]:
                if v not in visited:
                    heapq.heappush(min_heap, (w, v))
    
    return total_cost

# Graph: adjacency list
graph = {
    0: [(1, 2), (3, 6)],    # Node 0 is connected to node 1 (weight 2) and node 3 (weight 6)
    1: [(0, 2), (2, 3), (3, 8), (4, 5)],
    2: [(1, 3), (4, 7)],
    3: [(0, 6), (1, 8), (4, 9)],
    4: [(1, 5), (2, 7), (3, 9)]
}

print("Total cost of MST using Prim's:", prims(graph))





























def solve_nqueens(n):
    board = [-1] * n  # Board where index = row, value = column

    def is_safe(row, col):
        for r in range(row):
            if board[r] == col or abs(board[r] - col) == abs(r - row):
                return False
        return True

    def solve(row):
        if row == n:
            print(board)
            return
        for col in range(n):
            if is_safe(row, col):
                board[row] = col
                solve(row + 1)
                board[row] = -1  # Backtrack

    solve(0)

# Solve for 4-Queens
solve_nqueens(4)



























def chatbot():
    print("Hello! How can I help you today? (order status, refund, products, support)")

    while True:
        user_input = input("You: ").lower()
        
        if 'order' in user_input:
            print("Bot: Your order is on the way and will arrive soon.")
        elif 'refund' in user_input:
            print("Bot: Refunds are processed within 7-10 business days.")
        elif 'product' in user_input:
            print("Bot: We have electronics, clothing, and more.")
        elif 'support' in user_input:
            print("Bot: Please describe your issue, and we'll assist you.")
        elif 'bye' in user_input:
            print("Bot: Goodbye!")
            break
        else:
            print("Bot: I didn't understand. Can you clarify?")

chatbot()





















def medical_expert_system():
    print("Welcome to the AI Medical Expert System!")
    
    # Knowledge base
    knowledge_base = {
        ("fever", "cough"): "You might have flu. Please rest and see a doctor if it worsens.",
        ("fever", "headache"): "Possible viral infection. Drink water and consult a doctor.",
        ("pain", "chest"): "Chest pain can be serious. Please visit a hospital immediately.",
        ("pain", "stomach"): "You may have food poisoning or stomach infection.",
        ("pain", "back"): "It might be a muscle strain. Take rest and see a doctor if needed."
    }

    # Inference process (asking questions)
    symptom1 = input("Are you experiencing fever, pain, or something else? ").lower()
    symptom2 = input("Any additional symptom? (cough, headache, chest, stomach, back, none) ").lower()

    # AI logic: try to find matching advice
    advice = knowledge_base.get((symptom1, symptom2)) or knowledge_base.get((symptom2, symptom1))
    
    if advice:
        print("Advice:", advice)
    else:
        print("Advice: Symptoms unclear. Please consult a doctor.")

medical_expert_system()














python3 graph_traversal.py
https://anandgharu.wordpress.com/cloud-computing-2019/













